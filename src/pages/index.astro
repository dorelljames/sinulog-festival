---
import Layout from "../layouts/Layout.astro";
import * as scheduleData from "../data.json";
import { GOOGLE_MAPS_API_KEY } from "../config";
import { venueCoordinates } from "../data/locations";

const GITHUB_REPO = "https://github.com/dorelljames/sinulog-festival";

const sortedSchedule = scheduleData.schedule.sort(
  (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
);

// Filter out multi-day events
const dailySchedule = sortedSchedule.filter((day) => !day.endDate);
const multiDayEvents = sortedSchedule.filter((day) => day.endDate);

// Get today's date in YYYY-MM-DD format
const today = new Date().toISOString().split("T")[0];

// Find the closest date to today
const defaultDate = dailySchedule
  .map((day) => day.date)
  .reduce((prev, curr) =>
    Math.abs(new Date(curr).getTime() - new Date(today).getTime()) <
    Math.abs(new Date(prev).getTime() - new Date(today).getTime())
      ? curr
      : prev
  );

// Get unique venues for map markers
const venues = [
  ...new Set(
    sortedSchedule.flatMap((day) =>
      day.events
        .filter(
          (event) =>
            event.venue &&
            event.venue !== "To be announced" &&
            event.venue !== "TBA"
        )
        .map((event) => ({
          name: event.venue,
          events: [{ ...event, date: day.date }],
        }))
    )
  ),
].reduce((acc, curr) => {
  const existing = acc.find((v) => v.name === curr.name);
  if (existing) {
    existing.events.push(...curr.events);
    return acc;
  }
  return [...acc, curr];
}, []);

// Serialize venues data for client-side use
const serializedVenues = JSON.stringify(venues);
const serializedVenueCoordinates = JSON.stringify(venueCoordinates);
const serializedDefaultDate = JSON.stringify(defaultDate);
const serializedToday = JSON.stringify(today);

// Get all events for search
const allEvents = dailySchedule.flatMap((day) =>
  day.events.map((event) => ({
    ...event,
    date: day.date,
    formattedDate: new Date(day.date).toLocaleDateString("en-US", {
      weekday: "long",
      month: "long",
      day: "numeric",
    }),
  }))
);
const serializedAllEvents = JSON.stringify(allEvents);
---

<Layout>
  {/* GitHub Corner */}
  <a
    href={GITHUB_REPO}
    class="github-corner"
    aria-label="View source on GitHub"
    target="_blank"
    rel="noopener noreferrer"
  >
    <svg
      width="80"
      height="80"
      viewBox="0 0 250 250"
      class="absolute top-0 right-0 border-0 z-50"
      style="fill:#FD7E14; color:#fff;"
      aria-hidden="true"
    >
      <path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path>
      <path
        d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"
        fill="currentColor"
        style="transform-origin: 130px 106px;"
        class="octo-arm"></path>
      <path
        d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"
        fill="currentColor"
        class="octo-body"></path>
    </svg>
  </a>

  <main class="min-h-screen flex">
    {/* Sidebar */}
    <aside
      class="w-96 bg-white shadow-lg overflow-y-auto h-screen sticky top-0"
    >
      <div class="p-4">
        <header class="mb-6">
          <h1 class="text-2xl font-bold text-orange-600">
            {scheduleData.festivalName}
          </h1>
          <p class="text-sm text-gray-600">{scheduleData.tagline}</p>
        </header>

        {/* Search Bar */}
        <div class="mb-6 relative">
          <input
            type="search"
            id="eventSearch"
            placeholder="Search events, venues..."
            class="w-full px-4 py-2 rounded-lg border border-gray-200 focus:border-orange-500 focus:ring-2 focus:ring-orange-200 transition-colors"
          />
          <div
            id="searchResults"
            class="absolute left-0 right-0 top-full mt-2 bg-white rounded-lg shadow-lg border border-gray-100 max-h-96 overflow-y-auto hidden z-10"
          >
          </div>
        </div>

        {/* Date Navigation */}
        <div class="mb-6 flex gap-2 overflow-x-auto pb-2">
          {
            dailySchedule.map((day) => (
              <button
                class={`px-3 py-1 text-sm rounded-full transition-colors whitespace-nowrap ${
                  day.date === defaultDate
                    ? "bg-orange-500 text-white"
                    : "bg-orange-100 hover:bg-orange-200 text-orange-900"
                }`}
                onclick={`scrollToDay('${day.date}')`}
                data-date={day.date}
              >
                {new Date(day.date).toLocaleDateString("en-US", {
                  month: "short",
                  day: "numeric",
                })}
                {day.date === today && (
                  <span class="ml-1 text-xs font-medium">(Today)</span>
                )}
              </button>
            ))
          }
        </div>

        {/* Daily Events */}
        <div class="space-y-8">
          {
            dailySchedule.map((day) => (
              <div
                id={day.date}
                class={`scroll-mt-4 ${
                  day.date !== defaultDate ? "hidden" : ""
                }`}
              >
                <h2 class="text-lg font-semibold text-orange-800 mb-3 flex items-center justify-between">
                  {new Date(day.date).toLocaleDateString("en-US", {
                    weekday: "long",
                    month: "long",
                    day: "numeric",
                  })}
                  {day.date === today && (
                    <span class="text-sm bg-orange-100 text-orange-800 px-2 py-1 rounded-full">
                      Today
                    </span>
                  )}
                </h2>
                <div class="space-y-3">
                  {day.events.map((event) => (
                    <button
                      class="w-full text-left p-3 rounded-lg hover:bg-orange-50 transition-colors"
                      onclick={`centerMapOnVenue('${event.venue}')`}
                      disabled={
                        !event.venue ||
                        event.venue === "To be announced" ||
                        event.venue === "TBA"
                      }
                    >
                      <p class="font-medium text-gray-900">{event.name}</p>
                      <div class="text-sm text-gray-600 mt-1">
                        {event.time && <span>üïí {event.time}</span>}
                        {event.venue && (
                          <span class="ml-2">üìç {event.venue}</span>
                        )}
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </aside>

    {/* Map Container */}
    <div class="flex-1">
      <div id="map" class="w-full h-screen"></div>
    </div>
  </main>

  <style>
    .github-corner:hover .octo-arm {
      animation: octocat-wave 560ms ease-in-out;
    }
    @keyframes octocat-wave {
      0%,
      100% {
        transform: rotate(0);
      }
      20%,
      60% {
        transform: rotate(-25deg);
      }
      40%,
      80% {
        transform: rotate(10deg);
      }
    }
    @media (max-width: 500px) {
      .github-corner:hover .octo-arm {
        animation: none;
      }
      .github-corner .octo-arm {
        animation: octocat-wave 560ms ease-in-out;
      }
    }
  </style>

  <script
    define:vars={{
      serializedVenues,
      serializedVenueCoordinates,
      serializedDefaultDate,
      serializedToday,
      serializedAllEvents,
    }}
  >
    const cebuLatLng = { lat: 10.3157, lng: 123.8854 }; // Cebu City center
    const venuesData = JSON.parse(serializedVenues);
    const venueCoordinates = JSON.parse(serializedVenueCoordinates);
    const defaultDate = JSON.parse(serializedDefaultDate);
    const today = JSON.parse(serializedToday);
    const allEvents = JSON.parse(serializedAllEvents);
    let map;
    let markers = {};
    let activeInfoWindow = null;

    // Setup search functionality
    function setupSearch() {
      const searchInput = document.getElementById("eventSearch");
      const searchResults = document.getElementById("searchResults");
      let searchTimeout;

      searchInput.addEventListener("input", (e) => {
        clearTimeout(searchTimeout);
        const query = e.target.value.toLowerCase();

        // Hide results if query is empty
        if (!query) {
          searchResults.classList.add("hidden");
          return;
        }

        searchTimeout = setTimeout(() => {
          const results = allEvents.filter(
            (event) =>
              event.name.toLowerCase().includes(query) ||
              (event.venue && event.venue.toLowerCase().includes(query))
          );

          if (results.length > 0) {
            searchResults.innerHTML = results
              .slice(0, 10) // Limit to 10 results
              .map(
                (event) => `
                  <button
                    onclick="handleSearchResult('${event.date}', '${event.venue}')"
                    class="w-full text-left px-4 py-3 hover:bg-orange-50 border-b last:border-0 transition-colors"
                  >
                    <p class="font-medium text-gray-900">${event.name}</p>
                    <div class="text-sm text-gray-600">
                      ${event.formattedDate}
                      ${event.venue ? ` ‚Ä¢ ${event.venue}` : ""}
                    </div>
                  </button>
                `
              )
              .join("");
            searchResults.classList.remove("hidden");
          } else {
            searchResults.innerHTML = `
              <div class="px-4 py-3 text-gray-500">
                No results found
              </div>
            `;
            searchResults.classList.remove("hidden");
          }
        }, 300);
      });

      // Close search results when clicking outside
      document.addEventListener("click", (e) => {
        if (
          !searchInput.contains(e.target) &&
          !searchResults.contains(e.target)
        ) {
          searchResults.classList.add("hidden");
        }
      });

      // Clear search when pressing Escape
      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          searchInput.value = "";
          searchResults.classList.add("hidden");
        }
      });
    }

    function handleSearchResult(date, venue) {
      // Hide search results
      document.getElementById("searchResults").classList.add("hidden");
      document.getElementById("eventSearch").value = "";

      // Switch to the correct date
      scrollToDay(date);

      // If venue exists, center map on it
      if (venue && venue !== "To be announced" && venue !== "TBA") {
        setTimeout(() => centerMapOnVenue(venue), 500);
      }
    }

    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        zoom: 13,
        center: cebuLatLng,
        styles: [
          {
            featureType: "poi",
            elementType: "labels",
            stylers: [{ visibility: "off" }],
          },
        ],
      });

      // Add custom marker icons
      const markerIcons = {
        default: "https://maps.google.com/mapfiles/ms/icons/red-dot.png",
        active: "https://maps.google.com/mapfiles/ms/icons/orange-dot.png",
      };

      // Create markers for each venue
      venuesData.forEach((venue) => {
        const coordinates = venueCoordinates[venue.name];
        if (!coordinates) return;

        // Check if venue has events on the default date
        const hasEventsToday = venue.events.some(
          (event) => event.date === defaultDate
        );

        const marker = new google.maps.Marker({
          position: coordinates,
          map: map,
          title: venue.name,
          icon: hasEventsToday ? markerIcons.active : markerIcons.default,
          animation: hasEventsToday ? google.maps.Animation.DROP : null,
        });

        const infoWindow = new google.maps.InfoWindow({
          content: createInfoWindowContent(venue),
        });

        marker.addListener("click", () => {
          if (activeInfoWindow) {
            activeInfoWindow.close();
          }
          infoWindow.open(map, marker);
          activeInfoWindow = infoWindow;
        });

        markers[venue.name] = marker;
      });

      // Fit map to show all markers
      const bounds = new google.maps.LatLngBounds();
      Object.values(markers).forEach((marker) => {
        bounds.extend(marker.getPosition());
      });
      map.fitBounds(bounds);

      // Auto-scroll to today's section if it exists
      const todayButton = document.querySelector(
        `button[data-date="${today}"]`
      );
      if (todayButton) {
        todayButton.scrollIntoView({ behavior: "smooth", block: "nearest" });
      }

      // Setup search after map is initialized
      setupSearch();
    }

    function centerMapOnVenue(venueName) {
      const marker = markers[venueName];
      if (marker) {
        map.panTo(marker.getPosition());
        map.setZoom(15);
        google.maps.event.trigger(marker, "click");
      }
    }

    function createInfoWindowContent(venue) {
      return `
        <div class="p-2">
          <h3 class="font-medium text-lg mb-2">${venue.name}</h3>
          <div class="space-y-2">
            ${venue.events
              .map(
                (event) => `
              <div>
                <p class="font-medium">${event.name}</p>
                <p class="text-sm text-gray-600">
                  ${new Date(event.date).toLocaleDateString("en-US", {
                    month: "short",
                    day: "numeric",
                  })}
                  ${event.time ? ` ‚Ä¢ ${event.time}` : ""}
                </p>
              </div>
            `
              )
              .join("")}
          </div>
        </div>
      `;
    }

    function scrollToDay(date) {
      // Hide all date sections
      document.querySelectorAll('[id^="2025-"]').forEach((el) => {
        el.classList.add("hidden");
      });

      // Update active button state
      document.querySelectorAll("button[data-date]").forEach((btn) => {
        if (btn.dataset.date === date) {
          btn.classList.remove(
            "bg-orange-100",
            "hover:bg-orange-200",
            "text-orange-900"
          );
          btn.classList.add("bg-orange-500", "text-white");
        } else {
          btn.classList.remove("bg-orange-500", "text-white");
          btn.classList.add(
            "bg-orange-100",
            "hover:bg-orange-200",
            "text-orange-900"
          );
        }
      });

      // Show selected date section
      const element = document.getElementById(date);
      if (element) {
        element.classList.remove("hidden");
        element.scrollIntoView({ behavior: "smooth" });
      }

      // Update markers
      venuesData.forEach((venue) => {
        const marker = markers[venue.name];
        if (marker) {
          const hasEventsOnDate = venue.events.some(
            (event) => event.date === date
          );
          marker.setIcon(
            hasEventsOnDate ? markerIcons.active : markerIcons.default
          );
          marker.setAnimation(
            hasEventsOnDate ? google.maps.Animation.BOUNCE : null
          );
          setTimeout(() => marker.setAnimation(null), 750);
        }
      });
    }

    // Initialize map after the script loads
    window.initMap = initMap;
    window.centerMapOnVenue = centerMapOnVenue;
    window.scrollToDay = scrollToDay;
    window.handleSearchResult = handleSearchResult;
  </script>

  <script
    src={`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&callback=initMap&loading=async`}
    defer></script>
</Layout>
